;-------------------------------------------------------------------------------;-------------------------------------------------------------------------------
; This is a simple digital thermometer. The thermometer will display the 
; temperature in F or C depending on the current mode. The rightmost button on  
; the display board toggles the display setting between F and C.
; The temperature must be updated in real time.
;
;    Target: TI LaunchPad development board with MSP430G2553 device with the
;    custom Display Board installed
;
;       Date:           Novemebr 13, 2013
;       Last Revision:  Cleaned up code, made comments more clear 11/14/16  
;
;       Written by:     Jordan Flowers, ECE dept, Texas Tech University
;       Adapted from:   TI example code, Dr. Helm's Code
;       Texas Instruments Inc.
;       
;       Assembler/IDE:  IAR Embedded Workbench 5.5
;
;       HW I/O assignments:
;       P1.0    (output) Segment A (active low) drives display board
;       P1.1    (output) Segment B (active low) drives display board
;       P1.2    (output) Segment C (active low) drives display board
;       P1.3    (output) Segment D (active low) drives display board
;       P1.4    (output) Segment E (active low) drives display board
;       P1.5    (output) Segment F (active low) drives display board
;       P1.6    (output) Segment G (active low) drives display board
;       P1.7    (output) Segment DP (active low) drives display board
;
;       P2.0    (output) Digit 3 (active low) MSdigit (leftmost)
;       P2.1    (output) Digit 2 (active low)  
;       P2.2    (output) Digit 1 (active low)  
;       P2.3    (output) Digit 0 (active low) LSdigit (rightmost)
;       P2.4    (output) Other - (dots - colon) (active low)
;       P2.5    (input)  Pushbutton 0 (active low) (rightmost)
;       P2.6    (input)  Pushbutton 1 (active low) (middle)
;       P2.7    (input)  Pushbutton 2 (active low) (leftmost)
;
;
;
;*******************************************************************************
#include  "msp430g2553.h"
;-------------------------------------------------------------------------------
; Definition of Constants
;-------------------------------------------------------------------------------

DELAY      EQU     1000  ; max 16 bit value (FFFFh)

TIMER_A0_COUNT_1  EQU 2000
TIMER_A1_COUNT_1  EQU 50000

MAX_TIMER_COUNT EQU  10

SEG_A         EQU     %00000001 ; Port pin position P1.0
SEG_B         EQU     %00000010 ; Port pin position P1.1
SEG_C         EQU     %00000100 ; Port pin position P1.2
SEG_D         EQU     %00001000 ; Port pin position P1.3
SEG_E         EQU     %00010000 ; Port pin position P1.4
SEG_F         EQU     %00100000 ; Port pin position P1.5
SEG_G         EQU     %01000000 ; Port pin position P1.6
SEG_DP        EQU     %10000000 ; Port pin position P1.7

;since inverted pattern is needed for the display, this defines inverse pattern
SEG_A_N       EQU     ~SEG_A ; Port pin position P1.0
SEG_B_N       EQU     ~SEG_B ; Port pin position P1.1
SEG_C_N       EQU     ~SEG_C ; Port pin position P1.2
SEG_D_N       EQU     ~SEG_D ; Port pin position P1.3
SEG_E_N       EQU     ~SEG_E ; Port pin position P1.4
SEG_F_N       EQU     ~SEG_F ; Port pin position P1.5
SEG_G_N       EQU     ~SEG_G ; Port pin position P1.6
SEG_DP_N      EQU     ~SEG_DP ; Port pin position P1.7

;NOTE: display board requires INVERSE of these patterns due to Active LOW
DIG_3         EQU     %00000001 ; Port pin position P2.0 (MSdigit)
DIG_2         EQU     %00000010 ; Port pin position P2.1
DIG_1         EQU     %00000100 ; Port pin position P2.2
DIG_0         EQU     %00001000 ; Port pin position P2.3(LSdigit)
DP_COM        EQU     %00010000 ; Port pin position P2.4

;since inverted pattern is needed for the display, this defines inverse pattern
DIG_3_N       EQU     ~DIG_3 ; Port pin position P2.0 (MSdigit)
DIG_2_N       EQU     ~DIG_2 ; Port pin position P2.1
DIG_1_N       EQU     ~DIG_1 ; Port pin position P2.2
DIG_0_N       EQU     ~DIG_0 ; Port pin position P2.3(LSdigit)
DP_COM_N      EQU     ~DP_COM ; Port pin position P2.4


PB_0         EQU     %00100000 ; Port pin position P2.5
PB_1         EQU     %01000000 ; Port pin position P2.6
PB_2         EQU     %10000000 ; Port pin position P2.7


SEG_PORT         EQU     P1OUT
DIG_PORT         EQU     P2OUT
PB_PORT          EQU     P2IN


;since inverted pattern is needed for the display, this defines inverse pattern
ONE_N           EQU     ~%00000110
TWO_N           EQU     ~%01011011
THREE_N         EQU     ~%01001111
FOUR_N          EQU     ~%01100110
FIVE_N          EQU     ~%01101101
SIX_N           EQU     ~%01111101
SEVEN_N         EQU     ~%00000111
EIGHT_N         EQU     ~%01111111
NINE_N          EQU     ~%01100111
ZERO_N          EQU     ~%00111111
F_N             EQU     ~%01110001
C_N             EQU     ~%00111001
DOT             EQU     ~%00000100

;-------------------------------------------------------------------------------
; Definition of Variables
;-------------------------------------------------------------------------------

           ORG   0200h     ; beginning of RAM space (necessary statement)  

TotalINTCount0 DW  0         ;global variable used by Timer0 ISR  

TotalINTCount1 DW 0         ;global variable used by timer1 ISR
		   
DisplayValue  DW  0         ; contains 4 digit value to display in BCD format
                            ; BCDdig3 | BCDdig2  | BCDdig1  | BCDdig0
                            ; xxxx      xxxx       xxxx       xxxx
                            
CurrentDigitPos  DB  0      ;global variable used by WriteDigitToDisplay ISR
                            ; holds digit position of current digit to write
                            
CurrentDigitValue DB 0      ;global variable used by WriteDigitToDisplay ISR
                            ; holds digit value of next digit to write
                           
DegreeSign      DB 0        ; global variable used to write the degree sign
                            ; needed e.g. F or C , 0 = F , 1 = C

PB_0_Mode       DB 0        ; global variables needed for the pushbuttons
PB_1_Mode       DB 0
PB_2_Mode       DB 0

CountMode       DB  0       ;Boolean flag, TRUE (1) when counting
                            
; The following 3 variables store temperature data

TemperatureValue         DW  0 

TemperatureValueC        DW  0

TemperatureValueF        DW  0                            
                            
                       

;-------------------------------------------------------------------------------
            ORG     0C000h                  ; Program Reset (prog memory start)
                                            ; this is Program memory start 
                                            ; address for MSP430G2553 (16K)
;-------------------------------------------------------------------------------
RESET       mov.w   #0400h,SP        ; Initialize stackpointer(to end of RAM +1)
                                     ; RAM is 512 bytes, last position is 3FFh
                                     
StopWDT     mov.w   #WDTPW+WDTHOLD,&WDTCTL  ; Stop WDT

SetupP1     mov.b   #0FFh, &P1DIR  ; all as outputs (using 4-dig bd)          
           
SetupP2
           mov.b   #01Fh, &P2DIR ; all but 3 MSbits as outputs (using 4-dig bd)  

; activate the General Purpose Digital I/O mode for P2.6 and P2.7
           bic.b   #PB_1+PB_2, &P2SEL
           
           ; The PushButtons are wired to P2.5,6,7 (active LOW), so we need to  
           ; turn on the internal Pullup Resistors  - this is done with P2REN
           ; register           
       mov.b    #PB_0+PB_1+PB_2, &P2REN    ;turn on the internal resistor
       mov.b    #PB_0+PB_1+PB_2, &P2OUT    ; set the resistor to Pullup mode
           
           ; turn off all the segments and digits
       mov.b #0FFh, &SEG_PORT
       mov.b #0FFh, &DIG_PORT  
           
           ;setup Port 2 interrupts for the pushbutton
       bis.b   #PB_0+PB_1+PB_2, &P2IE    ; enable interrput for Pushbutton
       bis.b   #PB_0+PB_1+PB_2, &P2IES   ; set edge select for high to low trans
           
       clr.b   &P2IFG     ; clear the Int flag register for Port 2    

SetupCalibratedClock       
; Set up the clock (calibrated mode at 1 MHz)
; Get the calibrated data for the DCO clock
; Set DCO to 1 MHz:  (this directly from TI Family Guide page283 and 284
          CLR.B &DCOCTL ; Select lowest DCOx  and MODx settings
          MOV.B &CALBC1_1MHZ,&BCSCTL1 ; Set range
          MOV.B &CALDCO_1MHZ,&DCOCTL ; Set DCO step + modulation       
           
SetupTimerA0
            ;these 3 lines of code sets up the first Timer, TimerA_0
            ; note the difference in register names
            ; this one is set up to provide the 2 mS intervals to update
            ; the next digit of the multiplexed display
            mov.w   #TIMER_A0_COUNT_1,&TA0CCR0 ;load a count value into the counter
            mov.w   #CCIE,&TA0CCTL0        ; enable the timer interrupt

            mov.w   #TASSEL_2+ID_0+MC_1,&TA0CTL   ; select SMCLK/1, up mode 

SetupTimerA1      
            ;these 3 lines of code sets up the second Timer, TimerA_1
            ; note the difference in register names  
            ; this timer is set up to generate the 100 mS intervals for the
            ; basic clock counting rate  (it has higher priority than TimerA_0
            mov.w   #TIMER_A1_COUNT_1,&TA1CCR0 ;load a count value into the counter
            mov.w   #CCIE,&TA1CCTL0        ; enable the timer interrupt

            mov.w   #TASSEL_2+ID_1+MC_1,&TA1CTL   ; select SMCLK/2, up mode                
      

            mov  #0, &TotalINTCount0  ; make sure the total count is zero'ed 
     
ClearRAMVariables  
            clr  &TemperatureValue
            clr  &DisplayValue
            clr.b   &PB_0_Mode      
            mov #1h, &DegreeSign         
         
       
; setup ADC10 and temperature sensor

SetupADC10  mov.w   #INCH_10+ADC10DIV_3,&ADC10CTL1    ; Temp Sensor ADC10CLK/4
            mov.w   #SREF_1+ADC10SHT_3+REFON+ADC10ON+ADC10IE,&ADC10CTL0 ;
 
ClearInterruptFlags
           clr.b   &P2IFG     ; clear the Int flag register for Port 2            

EnableGeneralInterrupts
            bis.b #GIE,SR          ; enable the general interrupts bit            


;-------------------------------------------------------------------------------                       
;                             Start of main code
;-------------------------------------------------------------------------------

Mainloop    bis.w   #ENC+ADC10SC,&ADC10CTL0 ; Start sampling/conversion
    
            call #Delay

ModeCheck                            ; Checks to see what mode it is in
            cmp.b #1h, &DegreeSign
            jz Fahrenheit_Value
            jmp Celsius_Value

Fahrenheit_Value
            mov &TemperatureValueF, R12
            call #BIN2BCD4
            mov R13, &DisplayValue    ; moves temp in F to display
            jmp  Mainloop  
            
Celsius_Value
            mov &TemperatureValueC, R12
            call #BIN2BCD4
            mov R13, &DisplayValue    ; moves temp in C to display
            jmp  Mainloop  


;-------------------------------------------------------------------------------
;           End of main code
;-------------------------------------------------------------------------------                                            
                                           
;-------------------------------------------------------------------------------
;           Subroutines
;------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------
; WriteNextDigitToDisplay
;  passed in - DisplayValue, CurrentDigitPos, DegreeSign 
;  returned - nothing
;  accomplishes - Writes next digit to the expansion bd display
;  uses: R15, global variable CurrentDigitPos, CurrentDigitValue
;-------------------------------------------------------------------------------
WriteNextDigitToDisplay
    push R15     ; save R15 since we use it here
    
;following line added to fix "ghosting" problem  
    bis.b #DIG_0+DIG_1+DIG_2+DIG_3+DP_COM, DIG_PORT   ; this turns off any 
                                                      ; digits that are already ON
                                                      ; eliminates the "ghosting" problem    
    cmp #0, &CurrentDigitPos
    jeq  WriteDig0
    
    cmp #1, &CurrentDigitPos
    jeq  WriteDig1
    
    cmp #2, &CurrentDigitPos
    jeq  WriteDig2
    
    cmp #3, &CurrentDigitPos
    jeq  WriteDig3
	
    cmp #4, &CurrentDigitPos
    jeq  WriteDot
    
    ; invalid case - CurrentDigPos is invalid value
    clr &CurrentDigitPos   ; reset it
    jmp DoneWithDigitWriteTotally  ; get out of here
    
WriteDig0
     cmp.b #1h, &DegreeSign       ; Testing to see what mode you are in and
     jz  fahrenheit               ; what degree sign to display
     jmp celsius
     
fahrenheit                        ; Writes out an F for fahrenheit
      mov #F_N, SEG_PORT
      jmp WriteIt
      
celsius
      mov #C_N, SEG_PORT          ; Writes out a C for fahrenheit
      jmp WriteIt

WriteIt    
    mov.b #DIG_0_N, DIG_PORT
    jmp DoneWithDigitWrite
    
WriteDig1
    mov &DisplayValue, R15  ; make a copy
    and #000Fh, R15         ; mask out all but Dig 0
    ; use the value in R15 as an offset or index into SegPatternTable
    add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b @R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_1_N, DIG_PORT
    jmp DoneWithDigitWrite
    
WriteDig2
    mov &DisplayValue, R15  ; make a copy
    and #00F0h, R15         ; mask out all but Dig 1
    rra R15                     ; get the value into LSnibble position
    rra R15
    rra R15
    rra R15
    ; use the value in R15 as an offset or index into SegPatternTable
    add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b @R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_2_N, DIG_PORT
    jmp DoneWithDigitWrite
    
WriteDig3
    mov &DisplayValue, R15  ; make a copy
    and #0F00h, R15         ; mask out all but Dig 2
    swpb R15 
    ; use the value in R15 as an offset or index into SegPatternTable
    add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b @R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_3_N, DIG_PORT
    jmp DoneWithDigitWrite  

WriteDot                          ; Writes out the degree symbol
    mov.b #DOT, SEG_PORT
    mov.b #DP_COM_N, DIG_PORT
    jmp DoneWithDigitWrite

DoneWithDigitWrite
    inc &CurrentDigitPos   ; set up for next digit position for next time
    cmp.b #5, &CurrentDigitPos ; have we done the last one?, time to start over
    jl   DoneWithDigitWriteTotally
    clr &CurrentDigitPos   ; reset it if we need to start over

DoneWithDigitWriteTotally    
    pop R15     ; restore R15 before returning
    ret         ; return
;-------------------------------------------------------------------------------
;  end of WriteNextDigitToDisplay
;-------------------------------------------------------------------------------

; subroutines from TI example code for temperature issues
;-------------------------------------------------------------------------------
Trans2TempC  ;Subroutine coverts R12 = ADC10MEM/1024*423-278
;           oC = ((x/1024)*1500mV)-986mV)*1/3.55mV = x*423/1024 - 278
;           Input:  ADC10MEM  0000 - 0FFFh, R11, R12, R14, R15 working register
;           Output: R12  0000 - 091h
;-------------------------------------------------------------------------------
            mov.w   &ADC10MEM,R12 ;
            mov.w   #423,R11                 ; C
            call    #MPYU                    ;
            bic.w   #00FFh,R14               ; /1024
            add.w   R15,R14                  ;
            swpb    R14                      ;
            rra.w   R14                      ;
            rra.w   R14                      ;
            mov.w   R14,R12                  ;
            sub.w   #278,R12                 ; C
            mov.w   R12, TemperatureValueC
            ret                              ;
                                             ;
;-------------------------------------------------------------------------------
Trans2TempF  ;Subroutine coverts R12 = ADC10MEM/1024*761-468
;           oF = ((x/1024)*1500mV)-923mV)*1/1.97mV = x*761/1024 - 468
;           Input:  ADC10MEM  0000 - 0FFFh, R11, R12, R14, R15 working register
;           Output: R12  0000 - 0124h
;-------------------------------------------------------------------------------
            mov.w  &ADC10MEM,R12            ;
            mov.w   #761,R11                ; F
            call    #MPYU                   ;
            bic.w   #00FFh,R14              ; /1024
            add.w   R15,R14                 ;
            swpb    R14                     ;
            rra.w   R14                     ;
            rra.w   R14                     ;
            mov.w   R14,R12                 ;
            sub.w   #468,R12                ; F
            mov.w   R12,TemperatureValueF
            ret                             ;
                                            ;
;-------------------------------------------------------------------------------
BIN2BCD4  ; Subroutine converts binary number R12 -> Packed 4- digit BCD R13
;           Input:  R12  0000 - 0FFFh, R15 working register
;           Output: R13  0000 - 4095
;-------------------------------------------------------------------------------
            mov.w   #16,R15                 ; Loop Counter
            clr.w   R13                     ; 0 -> RESULT LSD
BIN1        rla.w   R12           ; Binary MSB to carry
            dadd.w  R13,R13                 ; RESULT x2 LSD
            dec.w   R15                     ; Through?
            jnz     BIN1                    ; Not through
            mov     R15, TemperatureValue
            ret                             ;
                                            ;
;-------------------------------------------------------------------------------
MPYU   ;    Unsigned Multipy R11 x R12 = R15|R14
       ;    Input:  R11, R12 -- R10 and R13 are working registers
       ;    Output: R15, R14
;-------------------------------------------------------------------------------
            clr.w   R14                     ; 0 -> LSBs result
            clr.w   R15                     ; 0 -> MSBs result
MACU        clr.w   R13                     ; MSBs multiplier
            mov.w   #1,R10                  ; bit test register
MPY2        bit.w   R10,R11                 ; test actual bit
            jz      MPY1                    ; IF 0: do nothing
            add.w   R12,R14                 ; IF 1: add multiplier to result
            addc.w  R13,R15                 ;
MPY1        rla.w   R12                     ; multiplier x 2
            rlc.w   R13                     ;
            rla.w   R10                     ; next bit to test
            jnc     MPY2                    ; if bit in carry: finished
            ret                             ; Return from subroutine
            
;-------------------------------------------------------------------------------
Delay
    push R15     ; save R15 since we use it here
DelayTopL
    mov #DELAY, R15     ;load loop counter (R15) with Delay constant
Loop1Long
    dec R15                     ; decrement loop counter
    jnz Loop1Long               ; Zero yet?, no decrement again

    pop R15     ; restore R15 before returning
    ret         ; return
;-------------------------------------------------------------------------------
;  end of Delay
;-------------------------------------------------------------------------------            

;-------------------------------------------------------------------------------
;           End of all Subroutines
;-------------------------------------------------------------------------------


;-------------------------------------------------------------------------------
;          Interrupt Service Routines
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Interrupt Service Routine for Timer_A 1
;  Passed in: nothing
;  Activated every time TimerA_1 times out
;  Uses: updates global variable Hundred_mS
;  For this example, set up to trigger every 100 mS
;-------------------------------------------------------------------------------

TA1_ISR ;Converts the original temperature value into something we can understand
      
      call #Trans2TempC
      call #Trans2TempF
      
      reti    ; return from interrupt

;-------------------------------------------------------------------------------
;  end of TA1_ISR   Timer_A 1 Interrupt Service Routine
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Interrupt Service Routine for Timer_A 0
;  Passed in: nothing
;  Activated every time TimerA_0 times out
;  
;  Uses: Write the digits to the display
;-------------------------------------------------------------------------------

TA0_ISR
           call #WriteNextDigitToDisplay
           
           reti    ; return from interrupt

;-------------------------------------------------------------------------------
;  end of TA0_ISR   Timer_A 0 Interrupt Service Routine
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
Port2_ISR
 ; if we get to here, an interrupt occurred on the Port 2
    
    bit.b  #PB_0, &P2IFG   ; PB_0 Pushbutton?  (if 1 it is pressed)
    jnz  PB_0_Case        ; it is PB_0
    ;no so try the next case
     
    bit.b  #PB_1, &P2IFG   ; PB_1 Pushbutton?  (if 1 it is pressed)
    jnz  PB_1_Case        ; it is PB_1
    ;no so try the next case

    bit.b  #PB_2, &P2IFG   ; PB_2 Pushbutton?  (if 1 it is pressed)
    jnz  PB_2_Case        ; it is PB_2
    jmp  FinishUp       ; no, so don't do anything
    
PB_0_Case    ; no so leave the interrupt
        bis.b #1, PB_0_Mode  ;Pushbutton operation the controlls the degree sign
        cmp.b #1, &DegreeSign
        jz  SwitchToC
        jmp SwitchToF

SwitchToC
    dec.b &DegreeSign         ; Switches the sign from F to C
    jmp FinishUp

SwitchToF                     ; Switches the sign from C to F
    inc.b &DegreeSign
    jmp FinishUp
    
PB_1_Case
    bis.b  #1,  &PB_1_Mode     ; Prevents this button from working when pressed
    jmp FinishUp    

PB_2_Case
    bis.b  #1,  &PB_2_Mode     ; Prevents this button from working when pressed
    jmp FinishUp       
    
FinishUp    
    clr.b &P2IFG  ; clears the flag for other interrupts 
    reti         ; return from interrupt
;-------------------------------------------------------------------------------
;  end of Port2_ISR
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; ADC10_ISR
;-------------------------------------------------------------------------------
ADC10_ISR
            ; save a copy of result into R4                                            ;
            
            mov.w &ADC10MEM, R4
            inc R5  ; keep a running count of interrupt events
       
            reti         ; return from interrupt
            
;-------------------------------------------------------------------------------
;                                  End of ADC10_ISR
;-------------------------------------------------------------------------------            

;-------------------------------------------------------------------------------           
;                   End of all Interrupt Service Routines
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
;           Definition of Program Data Memory
;-------------------------------------------------------------------------------
;        ORG   0E000h   ; this line not strictly necessary, but does force
                        ; the location of this program memory data - this is
                        ; a matter of convenience  - need to leave enough
                        ; space ahead of Interrupt Vectors for the data that
                        ; we are putting here

; usage: use SegPatternTable as base address, then offset into table for
; a specific 7-seg number (pattern) to display
SegPatternTable  ; contains patterns for each 7-seg number
     DB  ZERO_N
     DB  ONE_N
     DB  TWO_N
     DB  THREE_N
     DB  FOUR_N
     DB  FIVE_N
     DB  SIX_N
     DB  SEVEN_N
     DB  EIGHT_N
     DB  NINE_N
     DB  DOT
     
; usage: use DigitPatternTable as base address, then offset into table for
; a specific digit position to display

DigitPatternTable  ; contains patterns for each digit position common selection
     DB  DIG_0_N
     DB  DIG_1_N
     DB  DIG_2_N
     DB  DIG_3_N
     DB  DP_COM_N

;-------------------------------------------------------------------------------
;           Interrupt Vectors
;-------------------------------------------------------------------------------


; establish other interrupt(s) as needed in this table in appropriate location(s)
            
            ORG     0FFE6h                  ; MSP430 Port 2 Interrupt Vector
            DW      Port2_ISR		    ; address of Port 2 ISR 
            
            ORG     0FFEAh                  ;ADC10 Vector
            DW      ADC10_ISR               ;ADC10 Interrupt Service Routine 


	    ORG     0FFF2h                  ;TimerA_0 Vector
            DW      TA0_ISR                 ;TimerA_0 Interrupt Service 
            
            ORG     0FFFAh                  ;TimerA_1 Vector
            DW      TA1_ISR                 ;TimerA_1 Interrupt Service Routine

            ORG     0FFFEh                  ; MSP430 RESET Vector
            DW      RESET                   ; establishes the label RESET as 
                                            ; the starting point
            END                             ; END of all code for this program
;-------------------------------------------------------------------------------
;   End of all code
;-------------------------------------------------------------------------------

